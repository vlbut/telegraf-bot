import { Composer, Context } from 'telegraf';
import { startPage } from '../utils';
import { handleUser } from '../../db/User';
import { REDIS_PREFIX, wrappedHandle } from '../../db';

export const commandComposer = new Composer();

commandComposer.start(
	wrappedHandle(ctx => {
		handleUser(ctx);
		startPage(ctx);
	}),
);

commandComposer.action(new RegExp(`^${REDIS_PREFIX}`), async (ctx, next) => {
	if (ctx.update?.callback_query?.message?.message_id) ctx.update.callback_query.message.message_id = NaN;
	// @ts-ignore
	ctx.update.callback_query.data = ctx.update.callback_query.data.replace(`${REDIS_PREFIX}`, '');
	next();
});

commandComposer.action(
	'/mainPage',
	wrappedHandle(ctx => {
		startPage(ctx);
	}),
);

commandComposer.help(
	wrappedHandle(async ctx => {
		await ctx.reply(
			'–î–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ë–æ–≥ —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–¥—É üôè\n\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π —Å–µ–∫—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.\n–ù–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è.',
		);
		startPage(ctx);
	}),
);
